--- xalan-j_2_6_0/src/org/apache/xalan/xsltc/trax/SmartTransformerFactoryImpl.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xalan/xsltc/trax/SmartTransformerFactoryImpl.java	2005-05-07 18:00:55.682294072 +0200
@@ -168,6 +168,10 @@
         return false;
     }
 
+    public void setFeature(String name, boolean value) {
+	    // not supported
+    }
+
     public URIResolver getURIResolver() {
 	return _uriresolver; 
     } 
--- xalan-j_2_6_0/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java	2005-05-07 18:02:48.465148472 +0200
@@ -399,6 +399,9 @@
 	// Feature not supported
 	return false;
     }
+    public void setFeature(String name, boolean value) {
+	// not supported
+    }
 
     /**
      * javax.xml.transform.sax.TransformerFactory implementation.
--- xalan-j_2_6_0/src/org/apache/xalan/processor/TransformerFactoryImpl.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xalan/processor/TransformerFactoryImpl.java	2005-05-07 17:53:31.693790584 +0200
@@ -389,6 +389,11 @@
       return false;
   }
   
+  public void setFeature(String name, boolean value)
+  {
+      throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_NOT_SUPPORTED, new Object[]{name}));
+  }
+  
   public static boolean m_optimize = true;
   
   /** Flag set by FEATURE_SOURCE_LOCATION.
--- xalan-j_2_6_0/src/org/apache/xml/dtm/ref/dom2dtm/DOM2DTMdefaultNamespaceDeclarationNode.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xml/dtm/ref/dom2dtm/DOM2DTMdefaultNamespaceDeclarationNode.java	2005-05-07 17:35:28.134516632 +0200
@@ -27,6 +27,8 @@
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import org.w3c.dom.TypeInfo;
+import org.w3c.dom.UserDataHandler;
 
 /** This is a kluge to let us shove a declaration for xml: into the
  * DOM2DTM model.  Basically, it creates a proxy node in DOM space to
@@ -68,6 +70,8 @@
   public String getNodeValue() {return uri;}
   public String getValue() {return uri;}
   public Element getOwnerElement() {return pseudoparent;}
+  public TypeInfo getSchemaTypeInfo() {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public boolean isId() {throw new DTMException(NOT_SUPPORTED_ERR);}
   
   public boolean isSupported(String feature, String version) {return false;}
   public boolean hasChildNodes() {return false;}
@@ -91,6 +95,18 @@
   public Node removeChild(Node a) {throw new DTMException(NOT_SUPPORTED_ERR);}
   public Document getOwnerDocument() {return pseudoparent.getOwnerDocument();}
   public Node cloneNode(boolean deep) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public String getBaseURI() {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public short compareDocumentPosition(Node other) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public String getTextContent() {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public void setTextContent(String textContext) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public boolean isSameNode(Node other) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public String lookupPrefix(String namespaceURI) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public boolean isDefaultNamespace(String namespaceURI) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public String lookupNamespaceURI(String prefix) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public boolean isEqualNode(Node arg) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public Object getFeature(String feature, String version) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public Object setUserData(String key, Object data, UserDataHandler handler) {throw new DTMException(NOT_SUPPORTED_ERR);}
+  public Object getUserData(String key) {throw new DTMException(NOT_SUPPORTED_ERR);}
 	
 	/** Non-DOM method, part of the temporary kluge
 	 * %REVIEW% This would be a pruning problem, but since it will always be
--- xalan-j_2_6_0/src/org/apache/xml/dtm/ref/DTMNodeProxy.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xml/dtm/ref/DTMNodeProxy.java	2005-05-07 17:26:29.129457856 +0200
@@ -24,6 +24,7 @@
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
 import org.w3c.dom.Comment;
+import org.w3c.dom.DOMConfiguration;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.DOMImplementation;
 import org.w3c.dom.Document;
@@ -36,6 +37,8 @@
 import org.w3c.dom.NodeList;
 import org.w3c.dom.ProcessingInstruction;
 import org.w3c.dom.Text;
+import org.w3c.dom.TypeInfo;
+import org.w3c.dom.UserDataHandler;
 
 /**
  * <code>DTMNodeProxy</code> presents a DOM Node API front-end to the DTM model.
@@ -807,6 +810,63 @@
     throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
   }
 
+  /* _unsupported_ DOM Level 3 */
+
+  public String getInputEncoding()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+	  
+  public String getXmlEncoding()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+	  
+  public boolean getXmlStandalone()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+	  
+  public void setXmlStandalone(boolean xmlStandalone)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+	  
+  public String getXmlVersion()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+	  
+  public void setXmlVersion(String xmlVersion)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+	  
+  public String getDocumentURI()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public void setDocumentURI(String documentURI)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public DOMConfiguration getDomConfig()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public void normalizeDocument()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+  
+  public Node renameNode(Node n, String namespaceURI, String qualifiedName)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
   /**
    *
    * @param offset
@@ -821,6 +881,21 @@
     throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
   }
 
+  public boolean isElementContentWhitespace()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+ 
+  public String getWholeText()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+ 
+  public Text replaceWholeText(String content)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+ 
   /**
    *
    *
@@ -1105,6 +1180,26 @@
     throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
   }
 
+  public TypeInfo getSchemaTypeInfo()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public void setIdAttribute(String name, boolean isId)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public void setIdAttributeNS(String namespaceURI, String localName, boolean isId)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public void setIdAttributeNode(Attr idAttr, boolean isId)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
   /**
    *
    *
@@ -1165,6 +1260,11 @@
     return (newnode == DTM.NULL) ? null : (Element)(dtm.getNode(newnode));
   }
 
+  public boolean isId()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
   /**
    * NEEDSDOC Method adoptNode 
    *
@@ -1320,7 +1420,66 @@
   {
     throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
   }
+
+  public String getBaseURI()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public short compareDocumentPosition(Node other)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public String getTextContent()
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public void setTextContent(String textContext)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public boolean isSameNode(Node other)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public String lookupPrefix(String namespaceURI)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public boolean isDefaultNamespace(String namespaceURI)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public String lookupNamespaceURI(String prefix)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public boolean isEqualNode(Node arg)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public Object getFeature(String feature, String version)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public Object setUserData(String key, Object data, UserDataHandler handler)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
         
+  public Object getUserData(String key)
+  {
+    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
         
   /** Inner class to support getDOMImplementation.
    */
@@ -1353,5 +1512,10 @@
         return true;
       return false;
     }
+
+    public Object getFeature(String feature, String version)
+    {
+      throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
+    }
   }
 }
--- xalan-j_2_6_0/src/org/apache/xml/utils/UnImplNode.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xml/utils/UnImplNode.java	2005-05-07 17:45:21.775269520 +0200
@@ -24,6 +24,7 @@
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
 import org.w3c.dom.Comment;
+import org.w3c.dom.DOMConfiguration;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.DOMImplementation;
 import org.w3c.dom.Document;
@@ -36,6 +37,8 @@
 import org.w3c.dom.NodeList;
 import org.w3c.dom.ProcessingInstruction;
 import org.w3c.dom.Text;
+import org.w3c.dom.TypeInfo;
+import org.w3c.dom.UserDataHandler;
 
 /**
  * To be subclassed by classes that wish to fake being nodes.
@@ -1278,4 +1281,158 @@
   {
     error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
   }
+  
+  public String getBaseURI()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public short compareDocumentPosition(Node other)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return 0;
+  }
+  
+  public String getTextContent()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public void setTextContent(String textContext)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+  
+  public boolean isSameNode(Node other)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return false;
+  }
+  
+  public String lookupPrefix(String namespaceURI)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public boolean isDefaultNamespace(String namespaceURI)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return false;
+  }
+  
+  public String lookupNamespaceURI(String prefix)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public boolean isEqualNode(Node arg)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return false;
+  }
+  
+  public Object getFeature(String feature, String version)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public Object setUserData(String key, Object data, UserDataHandler handler)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public Object getUserData(String key)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public TypeInfo getSchemaTypeInfo()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+  
+  public void setIdAttribute(String name, boolean isId)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+  
+  public void setIdAttributeNS(String namespaceURI, String localName, boolean isId)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+  
+  public void setIdAttributeNode(Attr idAttr, boolean isId)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+
+  public String getInputEncoding()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+
+  public String getXmlEncoding()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+
+  public boolean getXmlStandalone()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return false;
+  }
+
+  public void setXmlStandalone(boolean xmlStandalone)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+
+  public String getXmlVersion()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+
+  public void setXmlVersion(String xmlVersion)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+
+  public String getDocumentURI()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+
+  public void setDocumentURI(String documentURI)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+
+  public DOMConfiguration getDomConfig()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
+
+  public void normalizeDocument()
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+  }
+
+  public Node renameNode(Node n, String namespaceURI, String qualifiedName)
+  {
+    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);
+    return null;
+  }
 }
--- xalan-j_2_6_0/src/org/apache/xpath/domapi/XPathNamespaceImpl.java.orig	2004-02-27 20:45:28.000000000 +0100
+++ xalan-j_2_6_0/src/org/apache/xpath/domapi/XPathNamespaceImpl.java	2005-05-07 17:57:36.410587976 +0200
@@ -27,6 +27,7 @@
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import org.w3c.dom.UserDataHandler;
 import org.w3c.dom.xpath.XPathNamespace;
 
 /**
@@ -264,4 +265,52 @@
         return m_attributeNode.hasAttributes();
     }
 
+  public String getBaseURI()
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public short compareDocumentPosition(Node other)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public String getTextContent()
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public void setTextContent(String textContext)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public boolean isSameNode(Node other)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public String lookupPrefix(String namespaceURI)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public boolean isDefaultNamespace(String namespaceURI)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public String lookupNamespaceURI(String prefix)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public boolean isEqualNode(Node arg)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public Object getFeature(String feature, String version)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public Object setUserData(String key, Object data, UserDataHandler handler)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
+  public Object getUserData(String key)
+  {
+    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,null);
+  }
 }
